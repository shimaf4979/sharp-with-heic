version: 0.2

env:
  variables:
    S3_BUCKET: "sharp-with-heic"

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - dnf -y update
      - dnf -y install gcc gcc-c++ make cmake autoconf automake libtool git tar xz
      - dnf -y install zlib-devel glib2-devel expat-devel libjpeg-turbo-devel
      - dnf -y install libpng-devel  libwebp-devel
      - dnf -y install openssl-devel pkgconfig meson ninja-build wget zip yasm
      - dnf -y install libexif-devel libxml2-devel gobject-introspection-devel
      # - dnf -y install fftw-devel lcms2-devel

  pre_build:
    commands:
      - export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig
      - export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:/usr/lib64

      # libde265
      - cd /tmp
      - git clone --depth 1 --branch v1.0.16 https://github.com/strukturag/libde265.git
      - cd libde265 && mkdir build && cd build
      - cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_DECODER=ON -DENABLE_ENCODER=OFF
      - make -j$(nproc) && make install && ldconfig

      # x265
      - cd /tmp
      - git clone --depth 1 --branch 3.6 https://bitbucket.org/multicoreware/x265_git.git
      - cd x265_git/build/linux && cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_SHARED=ON ../../source
      - make -j$(nproc) && make install && ldconfig

      # libaom (AV1 codec for AVIF)
      - cd /tmp
      - git clone --depth 1 --branch v3.7.0 https://aomedia.googlesource.com/aom
      - cd aom && mkdir -p build && cd build
      - cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_SHARED=ON -DENABLE_STATIC=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON
      - make -j$(nproc) && make install && ldconfig

      # libheif
      - cd /tmp
      - git clone --depth 1 --branch v1.20.1 https://github.com/strukturag/libheif.git
      - cd libheif && mkdir build && cd build
      - cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_EXAMPLES=OFF -DWITH_TESTS=OFF -DWITH_LIBDE265=ON -DWITH_X265=ON -DWITH_AOM_ENCODER=ON -DWITH_AOM_DECODER=ON -DWITH_LIBSHARPYUV=OFF
      - make -j$(nproc) && make install && ldconfig

      # libvips
      - cd /tmp
      - git clone --depth 1 --branch v8.17.1 https://github.com/libvips/libvips.git
      - cd libvips
      - meson setup builddir --prefix=/usr/local --buildtype=plain -Dmodules=disabled -Dintrospection=disabled -Dcpp=false -Ddeprecated=false -Dexamples=false -Dtests=false -Ddoc=false
      - cd builddir && ninja -j$(nproc) && ninja install && ldconfig

  build:
    commands:
      # Layer構造
      - mkdir -p /opt/nodejs/node_modules
      - mkdir -p /opt/lib

      # Sharp インストール
      - cd /opt/nodejs
      - export npm_config_sharp_libvips_local_prebuilds="/tmp"
      - export npm_config_sharp_libvips_global_prebuilds="/tmp"
      - npm install --build-from-source --sharp-libvips-use-global-prebuilds=false sharp@0.34.3

      # 必要な共有ライブラリコピー
      - cp -r /usr/local/lib* /opt/lib/
      - cp /usr/lib64/libjpeg* /opt/lib/ 2>/dev/null || true
      - cp /usr/lib64/libpng* /opt/lib/ 2>/dev/null || true
      - cp /usr/lib64/libtiff* /opt/lib/ 2>/dev/null || true
      - cp /usr/lib64/libwebp* /opt/lib/ 2>/dev/null || true
      - cp /usr/lib64/libexif* /opt/lib/ 2>/dev/null || true
      - cp /usr/lib64/libxml2* /opt/lib/ 2>/dev/null || true
      - cp /usr/lib64/libglib* /opt/lib/ 2>/dev/null || true
      - cp /usr/lib64/libgobject* /opt/lib/ 2>/dev/null || true
      - cp /usr/lib64/libgio* /opt/lib/ 2>/dev/null || true
      - cp /usr/lib64/libgmodule* /opt/lib/ 2>/dev/null || true
      # - cp /usr/lib64/libfftw* /opt/lib/ 2>/dev/null || true
      # - cp /usr/lib64/liblcms* /opt/lib/ 2>/dev/null || true
      # - cp /usr/lib64/libgomp* /opt/lib/ 2>/dev/null || true

      # 不要ファイル削除（静的ライブラリ・開発ファイル）
      - find /opt/lib -name "*.a" -delete
      - find /opt/lib -name "*.la" -delete
      - find /opt/lib -name "*.pc" -delete
      - rm -rf /opt/include || true
      - rm -rf /opt/lib/pkgconfig || true
      - rm -rf /opt/lib/cmake || true

      # ZIP作成
      - cd /opt && zip -r sharp-layer.zip nodejs lib
      - ls -la sharp-layer.zip
      - du -h sharp-layer.zip

  post_build:
    commands:
      - TIMESTAMP=$(date +%Y%m%d-%H%M%S)
      - aws s3 cp /opt/sharp-layer.zip s3://$S3_BUCKET/sharp-layer-${TIMESTAMP}.zip
      - aws s3 cp /opt/sharp-layer.zip s3://$S3_BUCKET/sharp-layer-latest.zip
      - echo "Layer uploaded to s3://$S3_BUCKET/"

artifacts:
  files:
    - /opt/sharp-layer.zip
  name: sharp-layer-$CODEBUILD_BUILD_NUMBER
